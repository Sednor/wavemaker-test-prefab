/*Copyright (c) 2018-2019 sednor.net All Rights Reserved.
 This software is the confidential and proprietary information of sednor.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with sednor.net*/
package com.kendo_data_table.salesdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.validation.annotation.Validated;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.kendo_data_table.salesdb.Channels;


/**
 * ServiceImpl object for domain model class Channels.
 *
 * @see Channels
 */
@Service("salesdb.ChannelsService")
@Validated
public class ChannelsServiceImpl implements ChannelsService {

    private static final Logger LOGGER = LoggerFactory.getLogger(ChannelsServiceImpl.class);


    @Autowired
    @Qualifier("salesdb.ChannelsDao")
    private WMGenericDao<Channels, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Channels, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "salesdbTransactionManager")
    @Override
	public Channels create(Channels channels) {
        LOGGER.debug("Creating a new Channels with information: {}", channels);

        Channels channelsCreated = this.wmGenericDao.create(channels);
        // reloading object from database to get database defined & server defined values.
        return this.wmGenericDao.refresh(channelsCreated);
    }

	@Transactional(readOnly = true, value = "salesdbTransactionManager")
	@Override
	public Channels getById(Integer channelsId) throws EntityNotFoundException {
        LOGGER.debug("Finding Channels by id: {}", channelsId);
        return this.wmGenericDao.findById(channelsId);
    }

    @Transactional(readOnly = true, value = "salesdbTransactionManager")
	@Override
	public Channels findById(Integer channelsId) {
        LOGGER.debug("Finding Channels by id: {}", channelsId);
        try {
            return this.wmGenericDao.findById(channelsId);
        } catch(EntityNotFoundException ex) {
            LOGGER.debug("No Channels found with id: {}", channelsId, ex);
            return null;
        }
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "salesdbTransactionManager")
	@Override
	public Channels update(Channels channels) throws EntityNotFoundException {
        LOGGER.debug("Updating Channels with information: {}", channels);

        this.wmGenericDao.update(channels);
        this.wmGenericDao.refresh(channels);

        return channels;
    }

    @Transactional(value = "salesdbTransactionManager")
	@Override
	public Channels delete(Integer channelsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting Channels with id: {}", channelsId);
        Channels deleted = this.wmGenericDao.findById(channelsId);
        if (deleted == null) {
            LOGGER.debug("No Channels found with id: {}", channelsId);
            throw new EntityNotFoundException(String.valueOf(channelsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(value = "salesdbTransactionManager")
	@Override
	public void delete(Channels channels) {
        LOGGER.debug("Deleting Channels with {}", channels);
        this.wmGenericDao.delete(channels);
    }

	@Transactional(readOnly = true, value = "salesdbTransactionManager")
	@Override
	public Page<Channels> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all Channels");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "salesdbTransactionManager")
    @Override
    public Page<Channels> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all Channels");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "salesdbTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service salesdb for table Channels to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "salesdbTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "salesdbTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }



}

